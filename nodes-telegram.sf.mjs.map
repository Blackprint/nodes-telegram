{"version":3,"names":["window","templates","_$_","sf","dom","$","_sf_internal","body_map","_replace","path","html","h","this","remove","reinitViews","append","document","body","apply","arguments","prepend","Blackprint","loadScope","url","getContext","telegram"],"sources":["src/_init.sf"],"sourcesContent":[".js will run first before .sf\n\n## js-global\n// This script will run first, and then the other .sf files\n// depends on blackprint.config.js configuration\n\n// Prepare stuff when the page is loading\n// maybe like loading our dependencies for the nodes\n\n/* If you have loaded any dependency from ./init.js can also wait from here\n * Warning: When using this, you must modify wrapped:'mjs' to wrapped:'async-mjs'\n * on blackprint.config.js, to avoid circular waiting (because this module also waiting)\n *\n * Info: imports.task() == sf.loader.task;\n */\n// await imports.task();\n\n\n// Because .js and .sf is separated\n// we also need to call LoadScope just like _init.js\nlet Blackprint = window.Blackprint.loadScope({\n\t// You can find the URL on Blackprint menu -> Modules\n\t// This will also be exported to JSON if this module's nodes is being used\n\turl: import.meta.url,\n});\n\n// Global shared context (wait it to avoid race condition)\nlet Context = await Blackprint.getContext('Telegram');\n\n// Use sQuery\nlet $ = sf.$;\nlet Tg = window.telegram;"],"mappings":"8HAEAA,EAAAC,YAAAD,EAAAC,UAAA,QAAAC,EAAAC,GAAAC,KAAAD,GAAAE,EAAAL,EAAAC,UAAAD,EAAAM,aAAAN,EAAAM,cAAA,CAAAC,SAAA,GAAAC,SAAAC,EAAAC,GAAA,IAAAC,EAAAT,EAAAQ,GAAA,OAAAE,KAAAL,SAAAE,IAAAG,KAAAL,SAAAE,GAAAI,SAAAD,KAAAE,aAAAF,KAAAE,YAAAH,GAAAC,KAAAL,SAAAE,GAAAE,CAAA,EAAAI,OAAAN,EAAAC,GAAAR,EAAAc,SAAAC,MAAAF,OAAAH,KAAAJ,SAAAU,MAAAN,KAAAO,WAAA,EAAAC,QAAAX,EAAAC,GAAAR,EAAAc,SAAAC,MAAAG,QAAAR,KAAAJ,SAAAU,MAAAN,KAAAO,WAAA,GAiBA,IAAAE,EAAArB,EAAAqB,WAAAC,UAAA,CAGAC,4BAIAF,EAAAG,WAAA,YAGArB,GAAAE,EACAL,EAAAyB,Q"}