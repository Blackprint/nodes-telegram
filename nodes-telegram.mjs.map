{"version":3,"sources":["_init.js","Empty.js","Connection/MTProto.js","Event/InlineQuery.js","Event/NewMessage.js","Group/Kick.js","Group/Leave.js","Message/Edit.js","Message/Reply.js","Message/Send.js","utils/NodeToast.js","Message/Component/ButtonCallback.js","Message/Component/ButtonReply.js","Message/Component/ButtonRow.js","Message/Component/InlineKeyboard.js","Message/Component/InlineMessage.js","Message/InlineQuery/Respond.js","Message/InlineQuery/Result/Article.js","Message/InlineQuery/Result/Game.js","Message/InlineQuery/Result/Photo.js"],"names":["_class2","_class3","_class4","_class5","_class6","_class7","_class8","_class9","_class10","_class11","_class12","_class13","_class14","_class15","_class16","_class17","_class18","window","globalThis","async","imports","urls","sf","loader","mjs","Promise","all","map","v","import","task","Tg","Blackprint","loadScope","url","hasDocs","fetch","require","Environment","loadFromURL","telegram","js","Error","Context","createContext","EventSlot","slot","Logger","prototype","error","e","VirtualClass","Api","Chat","constructor","Buffer","tl","serializeBytes","ButtonComponentNodeList","_class","utils","renameTypeName","InputBotInlineResult","KeyboardButtonRow","ReplyKeyboardMarkup","ReplyInlineMarkup","KeyboardButtonCallback","KeyboardButton","registerNode","Node","instance","super","iface","this","setInterface","title","_toast","NodeToast","warn","update","Input","Output","ref","toast","Client","disconnect","StringSession","AuthToken","API_ID","API_Hash","clear","temp","TelegramClient","sessions","retryDelay","RetryDelay","_bpEvList","addEventHandler","event","_onEvent","_bpOn","name","callback","list","includes","push","_bpOff","length","i","splice","ev","id","data","toString","userClick","setLogLevel","className","handler","start","botAuthToken","onError","msg","console","arguments","connect","IsConnected","_bpchangedsender","backupClient","that","_disconnect","_sender","apply","_autoReconnect","promise","reconnectTry","tryInterval","setInterval","connected","clearInterval","success","setTimeout","userDisconnected","destroy","input","Connect","Port","Trigger","node","Disconnect","String","Number","Default","output","Boolean","init","IInput","on","_callback","UserId","userId","Value","query","Query","queryId","_client","routes","routeOut","type","Object","Message","message","VirtualType","StructOf","SenderId","handle","senderId","ChatId","chatId","Id","field","GroupId","trigger","Text","_bp_client","editMessage","peerId","text","buttons","ReplyMarkup","Send","send","Union","sendMessage","replyTo","replyToMsgId","ReplyToMsgId","sendAs","SendAs","getInputEntity","undefined","haveInfo","haveWarn","haveError","_reduceText","replace","full","slice","info","$decoration","_raw","_id","Date","now","Math","random","Callback","Data","Button","from","Types","Row","ButtonCallback","ButtonReply","ArrayOf","rows","Rows","listenClickEvent","log","_lastClient","invoke","messages","SetInlineBotResults","results","List","cacheTime","gallery","private","RespondText","Title","description","Description","InputBotInlineMessageText","replyMarkup","RespondButtonRows","_dummyArticleButton","shortName","ShortName","InputBotInlineMessageGame","URL","thumb","InputWebDocument","size","mimeType","attributes","DocumentAttributeImageSize","w","h","content","InputBotInlineMessageMediaAuto"],"mappings":"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","file":"nodes-telegram.mjs","sourcesContent":["//> Optional, just for Blackprint Editor\n// Let the Blackprint Editor know the source URL where\n// the registerNode and registerInterface belongs to\nlet Blackprint = window.Blackprint.loadScope({\n\t// You can find the URL on Blackprint menu -> Modules\n\t// This will also be exported to JSON if this module's nodes is being used\n\turl: import.meta.url,\n\n\t// This will autoload (*.sf.mjs) and (*.sf.css) file for Browser\n\t// hasInterface: true,\n\n\t// This will autoload (*.docs.json) for Browser\n\thasDocs: true,\n});\n\nlet Tg, fetch = globalThis.fetch ?? require('node-fetch');\n\nif(Blackprint.Environment.loadFromURL){\n\tawait imports([\n\t\t// \"http://localhost:6789/dist/telegram.js\", // npm run build-gramjs\n\t\t\"https://cdn.jsdelivr.net/npm/@blackprint/nodes-telegram@0.0.2-dep/dist/browser/telegram.js\",\n\t]);\n\n\t// Sometime the browser is cached the old module and telegram couldn't be initialized\n\t// Let's try again for browser\n\tif(window.telegram == null && window.sf?.loader != null)\n\t\tawait sf.loader.js([\"https://cdn.jsdelivr.net/npm/@blackprint/nodes-telegram@0.0.2-dep/dist/browser/telegram.js\"]);\n\n\tif(window.telegram == null) throw new Error(\"Telegram library didn't initialized\");\n\tTg = window.telegram;\n}\nelse Tg = await import('telegram');\n\n// Global shared context\nlet Context = Blackprint.createContext('Telegram');\n\n// This is needed to avoid duplicated event listener when using hot reload\n// Event listener that registered with same slot will be replaced\nContext.EventSlot = {slot: 'my-private-event-slot'};\n\n// The error must be thrown\nTg.Logger.prototype.error = function(e){throw e};\nlet VirtualClass = Tg.Api.Chat.prototype.constructor;\nlet Buffer = globalThis.Buffer ?? Tg.tl.serializeBytes('').constructor;\n\nlet ButtonComponentNodeList = {};\n\n// Fix minified class name\nBlackprint.utils.renameTypeName({\n\tInputBotInlineResult: Tg.Api.InputBotInlineResult,\n\tKeyboardButtonRow: Tg.Api.KeyboardButtonRow,\n\tReplyKeyboardMarkup: Tg.Api.ReplyKeyboardMarkup,\n\tReplyInlineMarkup: Tg.Api.ReplyInlineMarkup,\n\tKeyboardButtonCallback: Tg.Api.KeyboardButtonCallback,\n\tKeyboardButton: Tg.Api.KeyboardButton,\n});","if(false){ // Avoid executing line below when this file being compiled\n// You can just copy and paste code below as a template for creating nodes\n\nBlackprint.registerNode(\"Telegram/FeatureName/Empty\",\nclass extends Blackprint.Node {\n\tstatic input = {};\n\tstatic output = {};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"Empty\";\n\t}\n});\n\nBlackprint.registerInterface('BPIC/Telegram/FeatureName/Empty',\nContext.IFace.Empty = class extends Blackprint.Interface{\n\tconstructor(node){\n\t\tsuper(node);\n\n\t\t// Add some properties for this object\n\t}\n});\n\nBlackprint.Sketch.registerInterface('BPIC/Telegram/FeatureName/Empty', {\n\ttemplate: null\n}, Context.IFace.Empty);\n\n\n}","/**\n * Connect into a user/bot account on Telegram server\n * @blackprint node\n */\nBlackprint.registerNode(\"Telegram/Connection/MTProto\",\nclass extends Blackprint.Node {\n\tstatic input = {\n\t\t/** Begin the connection/reconnection */\n\t\tConnect: Blackprint.Port.Trigger(({ iface })=> iface.node.connect()),\n\t\t/** Disconnect from the server */\n\t\tDisconnect: Blackprint.Port.Trigger(({ iface })=> iface.node.disconnect()),\n\t\t/** Bot/user's session token (Optional) */\n\t\tStringSession: String,\n\t\t/** Bot's auth token */\n\t\tAuthToken: String,\n\t\t/** Telegram cleint's API ID */\n\t\tAPI_ID: Number,\n\t\t/** Telegram cleint's API Hash */\n\t\tAPI_Hash: String,\n\t\t/** If connection failed, try again in specific time */\n\t\tRetryDelay: Blackprint.Port.Default(Number, 10000),\n\t};\n\tstatic output = {\n\t\t/** Telegram client for a user account */\n\t\tClient: Tg.TelegramClient,\n\t\t/** Return true if connected */\n\t\tIsConnected: Boolean,\n\t};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"Telegram MTProto\";\n\t\t// iface.type = \"event\";\n\n\t\tlet toast = this._toast = new NodeToast(iface);\n\t\ttoast.warn(\"Disconnected\");\n\t}\n\n\tupdate(){\n\t\tlet { Input, Output } = this.ref;\n\t\tlet toast = this._toast;\n\n\t\tif(Output.Client != null){\n\t\t\tOutput.Client.disconnect();\n\t\t\tOutput.Client = null;\n\t\t}\n\n\t\tif(!Input.StringSession && !Input.AuthToken)\n\t\t\treturn toast.warn(\"StringSession or AuthToken is required\");\n\n\t\t// Can be obtained from https://my.telegram.org/apps\n\t\tif(!Input.API_ID)\n\t\t\treturn toast.warn(\"API_ID is required\");\n\n\t\tif(!Input.API_Hash)\n\t\t\treturn toast.warn(\"API_Hash is required\");\n\n\t\ttoast.clear();\n\t\ttoast.warn(\"Disconnected\");\n\n\t\tlet temp = new Tg.TelegramClient(\n\t\t\tnew Tg.sessions.StringSession(Input.StringSession ?? ''),\n\t\t\tInput.API_ID,\n\t\t\tInput.API_Hash, {\n\t\t\t\tretryDelay: Input.RetryDelay,\n\t\t});\n\n\t\ttemp._bpEvList = {};\n\t\ttemp.addEventHandler(event => this._onEvent(event));\n\n\t\ttemp._bpOn = function(name, callback){\n\t\t\tlet list = this._bpEvList[name] ??= [];\n\t\t\tif(list.includes(callback)) return;\n\t\t\tlist.push(callback);\n\t\t}\n\t\ttemp._bpOff = function(name, callback){\n\t\t\tlet list = this._bpEvList[name];\n\t\t\tif(list == null || list.length === 0) return;\n\n\t\t\tif(callback == null)\n\t\t\t\treturn list.length = 0;\n\n\t\t\tlet i = list.includes(callback);\n\t\t\tif(i === -1) return;\n\n\t\t\tlist.splice(i, 1);\n\t\t}\n\n\t\ttemp._bpOn('UpdateInlineBotCallbackQuery', ev => {\n\t\t\tlet id = ev.data.toString('utf8');\n\t\t\tButtonComponentNodeList[id]?.userClick(ev);\n\t\t});\n\n\t\ttemp.setLogLevel(\"error\"); // only errors\n\n\t\t// Send to output\n\t\tOutput.Client = temp;\n\t}\n\t_onEvent(event){\n\t\tif(event.className === void 0){\n\t\t\t// let eventName = event.constructor.name;\n\t\t\treturn;\n\t\t}\n\n\t\tlet { _bpEvList } = this.ref.Output.Client;\n\t\tlet handler = _bpEvList[event.className];\n\n\t\tif(handler === void 0){\n\t\t\t// console.log('Unhandled Event:', event);\n\t\t\treturn;\n\t\t}\n\n\t\tfor (let i=0; i < handler.length; i++) {\n\t\t\thandler[i](event);\n\t\t}\n\t}\n\tasync connect(){\n\t\tlet { Input, Output } = this.ref;\n\t\tlet toast = this._toast;\n\n\t\tif(Output.Client == null){\n\t\t\tthis.update();\n\t\t\tif(Output.Client == null) return;\n\t\t}\n\n\t\ttoast.warn(\"Connecting\");\n\n\t\ttry{\n\t\t\tif(!Input.AuthToken)\n\t\t\t\tawait Output.Client.connect();\n\t\t\telse await Output.Client.start({\n\t\t\t\tbotAuthToken: Input.AuthToken,\n\t\t\t\tonError(msg){\n\t\t\t\t\ttoast.error(\"Failed to connect\");\n\t\t\t\t\tconsole.error(arguments);\n\t\t\t\t}\n\t\t\t});\n\t\t} catch(e) {\n\t\t\ttoast.error(\"Failed to connect\");\n\t\t\tconsole.error(e);\n\t\t\tOutput.IsConnected = false;\n\t\t\treturn;\n\t\t} finally {\n\t\t\ttoast.warn();\n\t\t}\n\n\t\tif(!Output.Client._bpchangedsender){\n\t\t\tOutput.Client._bpchangedsender = true;\n\n\t\t\tlet backupClient = Output.Client;\n\t\t\tlet that = this;\n\t\t\tlet _disconnect = Output.Client._sender.disconnect;\n\t\t\tOutput.Client._sender.disconnect = async function() {\n\t\t\t\ttoast.warn(\"Disconnected\");\n\t\t\t\tOutput.IsConnected = false;\n\n\t\t\t\tawait _disconnect.apply(this, arguments);\n\t\t\t\tif(backupClient !== Output.Client || !that._autoReconnect) return;\n\n\t\t\t\ttoast.warn(\"Reconnecting\");\n\t\t\t\tlet promise = backupClient.connect();\n\t\n\t\t\t\tlet reconnectTry = 0;\n\t\t\t\tlet tryInterval = setInterval(async ()=> {\n\t\t\t\t\tif(backupClient !== Output.Client || !that._autoReconnect || backupClient.connected){\n\t\t\t\t\t\tclearInterval(tryInterval);\n\t\t\t\t\t\tOutput.IsConnected = true;\n\t\t\t\t\t\ttoast.clear();\n\t\t\t\t\t\ttoast.success(\"Connected\");\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\ttoast.warn(\"Reconnecting \" + (++reconnectTry));\n\t\t\t\t\t\tawait backupClient.connect();\n\t\t\t\t\t}\n\t\t\t\t}, 5000);\n\n\t\t\t\tawait promise;\n\t\t\t\tsetTimeout(()=> {\n\t\t\t\t\tif(backupClient.connected && !backupClient._sender.userDisconnected){\n\t\t\t\t\t\ttoast.clear();\n\t\t\t\t\t\ttoast.success(\"Connected\");\n\t\t\t\t\t\tclearInterval(tryInterval);\n\t\t\t\t\t}\n\t\t\t\t}, 100);\n\t\t\t}\n\t\t}\n\n\t\tthis._autoReconnect = true;\n\n\t\ttoast.clear();\n\t\ttoast.success(\"Connected\");\n\t\tOutput.IsConnected = true;\n\t}\n\tdestroy(){this.disconnect()}\n\tdisconnect(){\n\t\tlet { Output } = this.ref;\n\t\tOutput.Client?.disconnect();\n\t\tthis._autoReconnect = false;\n\t\tOutput.IsConnected = false;\n\t\tthis._toast.warn(\"Disconnected\");\n\t}\n});\n","/**\n * Listen to inline query event\n * @blackprint node\n */\nBlackprint.registerNode(\"Telegram/Event/InlineQuery\",\nclass extends Blackprint.Node {\n\tstatic type = 'event';\n\tstatic input = {\n\t\t/** Telegram client for a user account */\n\t\tClient: Tg.TelegramClient,\n\t};\n\tstatic output = {\n\t\t/** Sender's id */\n\t\tUserId: String,\n\t\t/** Text value */\n\t\tValue: String,\n\t\t/** Query object */\n\t\tQuery: Object,\n\t};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"On Inline Query\";\n\t}\n\n\tinit(){\n\t\tlet { Input, IInput } = this.ref;\n\t\tIInput.Client.on('disconnect', ev => {\n\t\t\tif(this._callback == null) return;\n\t\t\tInput.Client._bpOff('UpdateBotInlineQuery', this._callback);\n\t\t});\n\t}\n\n\tupdate(){\n\t\tlet { Input, Output } = this.ref;\n\t\tif(!Input.Client) return;\n\n\t\tInput.Client._bpOn('UpdateBotInlineQuery', this._callback = ev => {\n\t\t\t// console.log(ev);\n\t\t\tOutput.UserId = String(ev.userId);\n\t\t\tOutput.Value = String(ev.query);\n\t\t\tOutput.Query = {\n\t\t\t\tid: String(ev.queryId),\n\t\t\t\t_client: Input.Client\n\t\t\t};\n\n\t\t\tthis.routes.routeOut();\n\t\t});\n\t}\n\n\tdestroy(){\n\t\tthis.ref.Input.Client?._bpOff('UpdateBotInlineQuery', this._callback);\n\t}\n});","/**\n * Listen to new message event\n * @blackprint node\n */\nBlackprint.registerNode(\"Telegram/Event/NewMessage\",\nclass extends Blackprint.Node {\n\tstatic type = 'event';\n\tstatic input = {\n\t\t/** Telegram client for a user account */\n\t\tClient: Tg.TelegramClient,\n\t};\n\tstatic output = {\n\t\t/** New message data */\n\t\tMessage: Context.VirtualType(Blackprint.Port.StructOf(Object, {\n\t\t\t/** Message sender's id */\n\t\t\tSenderId: {type: String, handle: v=> String(v.senderId)},\n\t\t\t/** Message chat room's id */\n\t\t\tChatId: {type: String, handle: v=> String(v.chatId)},\n\t\t\t/** Message's id */\n\t\t\tId: {type: String, handle: v=> String(v.id)},\n\t\t\t/** Message's text value */\n\t\t\tValue: {type: String, field: 'message'},\n\t\t}), \"Message\"),\n\t};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"On New Message\";\n\t}\n\n\tinit(){\n\t\tlet { Input, IInput } = this.ref;\n\t\tIInput.Client.on('disconnect', ev => {\n\t\t\tif(this._callback == null) return;\n\t\t\tInput.Client._bpOff('UpdateNewMessage', this._callback);\n\t\t});\n\t}\n\n\tupdate(){\n\t\tlet { Input, Output } = this.ref;\n\t\tif(!Input.Client) return;\n\n\t\tInput.Client._bpOn('UpdateNewMessage', this._callback = ev => {\n\t\t\t// console.log(ev);\n\t\t\tOutput.Message = ev.message;\n\t\t\tthis.routes.routeOut();\n\t\t});\n\t}\n\n\tdestroy(){\n\t\tthis.ref.Input.Client?._bpOff('UpdateNewMessage', this._callback);\n\t}\n});\n\n// UpdateEditMessage\n// UpdateEditChannelMessage\n// UpdateNewChannelMessage\n// UpdateNewMessage\n// UpdateShortSentMessage\n// UpdateBotCallbackQuery\n// UpdateChannelUserTyping\n// UpdateUserStatus\n// UpdateDeleteMessages\n// UpdateReadChannelInbox\n// UpdateMessagePoll\n// UpdateUserName\n// UpdateUserPhoto\n// UpdateDeleteChannelMessages\n// UpdateGroupCallParticipants\n// UpdateDraftMessage\n// UpdateChatParticipant\n// UpdateChatParticipants\n// UpdateBotInlineQuery\n// UpdateInlineBotCallbackQuery\n// UpdateBotInlineSend\n// UpdateGroupCall","/**\n * Kick member from a group\n * @blackprint node\n */\nBlackprint.registerNode(\"Telegram/Group/Kick\",\nclass extends Blackprint.Node {\n\tstatic input = {\n\t\t/** Trigger the process */\n\t\tTrigger: Blackprint.Port.Trigger(({ iface })=> iface.node.trigger()),\n\t\tAuthToken: String,\n\t\tGroupId: String,\n\t\tUserId: String,\n\t};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"Kick Group Member\";\n\t\tthis._toast = new NodeToast(iface);\n\t}\n\n\tasync trigger(){\n\t\tlet { Input } = this.ref;\n\t\tlet toast = this._toast;\n\n\t\tif(!Input.GroupId) return toast.warn(\"GroupId is required\");\n\n\t\ttoast.warn(\"Kicking\");\n\n\t\ttry {\n\t\t\tawait fetch(`https://api.telegram.org/bot${Input.AuthToken}/kickChatMember?chat_id=${Input.GroupId}&user_id=${Input.UserId}`);\n\t\t\tthis.routes.routeOut();\n\t\t} catch(e) {\n\t\t\tconsole.error(e);\n\t\t\ttoast.warn();\n\t\t\ttoast.error(\"Failed to kick group member\");\n\t\t}\n\n\t\ttoast.clear();\n\t}\n});","/**\n * Leave from a group\n * @blackprint node\n */\nBlackprint.registerNode(\"Telegram/Group/Leave\",\nclass extends Blackprint.Node {\n\tstatic input = {\n\t\t/** Trigger the process */\n\t\tTrigger: Blackprint.Port.Trigger(({ iface })=> iface.node.trigger()),\n\t\tAuthToken: String,\n\t\tGroupId: String,\n\t};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"Leave Group\";\n\t\tthis._toast = new NodeToast(iface);\n\t}\n\n\tasync trigger(){\n\t\tlet { Input } = this.ref;\n\t\tlet toast = this._toast;\n\n\t\tif(!Input.GroupId) return toast.warn(\"GroupId is required\");\n\n\t\ttoast.warn(\"Leaving\");\n\n\t\ttry {\n\t\t\tawait fetch(`https://api.telegram.org/bot${Input.AuthToken}/leaveChat?chat_id=${Input.GroupId}`);\n\t\t\tthis.routes.routeOut();\n\t\t} catch(e) {\n\t\t\tconsole.error(e);\n\t\t\ttoast.warn();\n\t\t\ttoast.error(\"Failed to leave group\");\n\t\t}\n\n\t\ttoast.clear();\n\t}\n});","/**\n * Edit text message from a message\n * @blackprint node\n */\nBlackprint.registerNode(\"Telegram/Message/Edit\",\nclass extends Blackprint.Node {\n\tstatic input = {\n\t\t/** Trigger the send process */\n\t\tSend: Blackprint.Port.Trigger(({ iface })=> iface.node.send()),\n\t\t/** Target Message object */\n\t\tMessage: Context.VirtualType(Object, \"Message\"),\n\t\t/** Text for being send */\n\t\tText: String,\n\t\t/** For adding button to the message or user keyboard */\n\t\tReplyMarkup: Blackprint.Port.Union([Tg.Api.ReplyKeyboardMarkup, Tg.Api.ReplyInlineMarkup]),\n\t};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"Edit Message\";\n\t\tthis._toast = new NodeToast(iface);\n\t}\n\n\tasync send(){\n\t\tlet { Input } = this.ref;\n\t\tlet toast = this._toast;\n\n\t\tif(!Input.Message) return toast.warn(\"Message is required\");\n\t\tif(!Input.Text) return toast.warn(\"Text is required\");\n\n\t\ttoast.warn(\"Sending\");\n\t\tlet { Message } = Input;\n\n\t\ttry {\n\t\t\tawait Message._bp_client.editMessage(Message.peerId, {\n\t\t\t\t// noWebpage: true,\n\t\t\t\tmessage: Message.id,\n\t\t\t\ttext: Input.Text,\n\t\t\t\tbuttons: Input.ReplyMarkup,\n\t\t\t\t// parseMode: 'html',\n\t\t\t});\n\t\t\tthis.routes.routeOut();\n\t\t} catch(e) {\n\t\t\tconsole.error(e);\n\t\t\ttoast.warn();\n\t\t\ttoast.error(\"Failed to send message\");\n\t\t}\n\n\t\ttoast.clear();\n\t}\n});","/**\n * Reply a text message\n * @blackprint node\n */\nBlackprint.registerNode(\"Telegram/Message/Reply\",\nclass extends Blackprint.Node {\n\tstatic input = {\n\t\t/** Trigger the send process */\n\t\tSend: Blackprint.Port.Trigger(({ iface })=> iface.node.send()),\n\t\t/** Target Message object */\n\t\tMessage: Context.VirtualType(Object, \"Message\"),\n\t\t/** Text for being send */\n\t\tText: String,\n\t\t/** For adding button to the message or user keyboard */\n\t\tReplyMarkup: Blackprint.Port.Union([Tg.Api.ReplyKeyboardMarkup, Tg.Api.ReplyInlineMarkup]),\n\t};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"Reply Message\";\n\t\tthis._toast = new NodeToast(iface);\n\t}\n\n\tasync send(){\n\t\tlet { Input } = this.ref;\n\t\tlet toast = this._toast;\n\n\t\tif(!Input.Message) return toast.warn(\"Message is required\");\n\t\tif(!Input.Text) return toast.warn(\"Text is required\");\n\n\t\ttoast.warn(\"Sending\");\n\t\tlet { Message } = Input;\n\n\t\ttry {\n\t\t\tawait Message._bp_client.sendMessage(Message.peerId, {\n\t\t\t\t// noWebpage: true,\n\t\t\t\treplyTo: Message.id,\n\t\t\t\tmessage: Input.Text,\n\t\t\t\tbuttons: Input.ReplyMarkup,\n\t\t\t\t// parseMode: 'html',\n\t\t\t});\n\t\t\tthis.routes.routeOut();\n\t\t} catch(e) {\n\t\t\tconsole.error(e);\n\t\t\ttoast.warn();\n\t\t\ttoast.error(\"Failed to send message\");\n\t\t}\n\n\t\ttoast.clear();\n\t}\n});","/**\n * Send text message to target user\n * @blackprint node\n */\nBlackprint.registerNode(\"Telegram/Message/Send\",\nclass extends Blackprint.Node {\n\tstatic input = {\n\t\t/** Telegram client for a user account */\n\t\tClient: Tg.TelegramClient,\n\t\t/** Trigger the send process */\n\t\tSend: Blackprint.Port.Trigger(({ iface })=> iface.node.send()),\n\t\t/**\n\t\t * Target ChatID\n\t\t * You can also use username by adding @ as the first character\n\t\t */\n\t\tChatId: String,\n\t\t/**\n\t\t * Send as channel or alternate account id\n\t\t * You can also use username by adding @ as the first character\n\t\t */\n\t\tSendAs: String,\n\t\t/** Text message that will be send */\n\t\tText: String,\n\t\t/** For adding button to the message or user keyboard */\n\t\tReplyMarkup: Blackprint.Port.Union([Tg.Api.ReplyKeyboardMarkup, Tg.Api.ReplyInlineMarkup]),\n\t};\n\tstatic output = {\n\t\t/** Message object */\n\t\tMessage: Context.VirtualType(Blackprint.Port.StructOf(Object, {\n\t\t\tId: {type: String, handle: v=> String(v.id)},\n\t\t}), \"Message\"),\n\t};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"Send Message\";\n\t\tthis._toast = new NodeToast(iface);\n\t}\n\n\tasync send(){\n\t\tlet { Input, Output } = this.ref;\n\t\tlet toast = this._toast;\n\n\t\tif(!Input.Client) return toast.warn(\"Client is required\");\n\t\tif(!Input.ChatId) return toast.warn(\"ChatId is required\");\n\t\tif(!Input.Text) return toast.warn(\"Text is required\");\n\n\t\ttoast.warn(\"Sending\");\n\t\ttry {\n\t\t\tOutput.Message = await Input.Client.sendMessage(Input.ChatId, {\n\t\t\t\t// noWebpage: true,\n\t\t\t\tmessage: Input.Text,\n\t\t\t\treplyToMsgId: Input.ReplyToMsgId,\n\t\t\t\tsendAs: Input.SendAs ? await Input.Client.getInputEntity(Input.SendAs) : undefined,\n\t\t\t\tbuttons: Input.ReplyMarkup,\n\t\t\t\t// parseMode: 'html',\n\t\t\t});\n\t\t\tOutput.Message._bp_client = Input.Client;\n\t\t\tthis.routes.routeOut();\n\t\t} catch(e) {\n\t\t\tconsole.error(e);\n\t\t\ttoast.warn();\n\t\t\ttoast.error(\"Failed to send message\");\n\t\t\tOutput.Message = null;\n\t\t}\n\n\t\ttoast.clear();\n\t}\n});","/**\n * import { Context } from \"./_init.js\";\n */\n\n// Bootstrap for add toast on node decoration\nlet NodeToast = Context.NodeToast = class NodeToast {\n\tconstructor(iface){\n\t\tthis.iface = iface;\n\t}\n\n\tclear(){\n\t\tif(this.haveInfo)\n\t\t\tthis.haveInfo.destroy();\n\t\tif(this.haveWarn)\n\t\t\tthis.haveWarn.destroy();\n\t\tif(this.haveError)\n\t\t\tthis.haveError.destroy();\n\n\t\tthis.haveInfo = false;\n\t\tthis.haveWarn = false;\n\t\tthis.haveError = false;\n\t}\n\n\t_reduceText(text){\n\t\treturn text.replace(/\\w{15,}/g, full => full.slice(0, 5)+'...');\n\t}\n\n\tinfo(text){\n\t\tif(!this.iface.$decoration) return;\n\t\tif(!text){\n\t\t\tthis.haveInfo.destroy();\n\t\t\tthis.haveInfo = null;\n\t\t\treturn;\n\t\t}\n\n\t\tlet temp = text;\n\t\ttext = this._reduceText(text);\n\n\t\tif(this.haveInfo)\n\t\t\tthis.haveInfo.text = text;\n\t\telse\n\t\t\tthis.haveInfo = this.iface.$decoration.info(text);\n\n\t\tthis.haveInfo._raw = temp;\n\t}\n\n\twarn(text){\n\t\tif(!this.iface.$decoration) return;\n\t\tif(!text){\n\t\t\tthis.haveWarn.destroy();\n\t\t\tthis.haveWarn = null;\n\t\t\treturn;\n\t\t}\n\n\t\tlet temp = text;\n\t\ttext = this._reduceText(text);\n\n\t\tif(this.haveWarn)\n\t\t\tthis.haveWarn.text = text;\n\t\telse\n\t\t\tthis.haveWarn = this.iface.$decoration.warn(text);\n\n\t\tthis.haveWarn._raw = temp;\n\t}\n\n\terror(text){\n\t\tif(!this.iface.$decoration) return;\n\t\tif(!text){\n\t\t\tthis.haveError.destroy();\n\t\t\tthis.haveError = null;\n\t\t\treturn;\n\t\t}\n\n\t\tlet temp = text;\n\t\ttext = this._reduceText(text);\n\n\t\tif(this.haveError)\n\t\t\tthis.haveError.text = text;\n\t\telse\n\t\t\tthis.haveError = this.iface.$decoration.error(text);\n\n\t\tthis.haveError._raw = temp;\n\t}\n\n\tsuccess(text){\n\t\tif(!this.iface.$decoration) return;\n\t\tlet ref = this.iface.$decoration.success(this._reduceText(text));\n\t\tref._raw = text;\n\t}\n}","/**\n * ToDo\n * @blackprint node\n */\nBlackprint.registerNode(\"Telegram/Message/Component/ButtonCallback\",\nclass extends Blackprint.Node {\n\tstatic input = {\n\t\tText: String,\n\t\t/** Data to be passed to the event listener after user clicked the button */\n\t\tData: String,\n\t};\n\tstatic output = {\n\t\tButton: Tg.Api.KeyboardButtonCallback,\n\t\t/** Can be called use clicked the button and the Data input is not defined */\n\t\tCallback: Blackprint.Types.Trigger,\n\t};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"Create a callback button\";\n\t\tthis._id = 'ɃƤ_'+String(Date.now()).slice(3) + (Math.random()*1e3 | 0);\n\n\t\tButtonComponentNodeList[this._id] = this;\n\t}\n\n\tuserClick(ev){\n\t\t// .data, .queryId, .userId\n\t\tthis.ref.Output.Callback();\n\t}\n\n\tasync update(){\n\t\tlet { Input, Output } = this.ref;\n\n\t\tlet data = Input.Data || this._id;\n\t\tOutput.Button = new Tg.Api.KeyboardButtonCallback({\n\t\t\ttext: Input.Text,\n\t\t\tdata: Buffer.from(data),\n\t\t});\n\t}\n\n\tdestroy(){\n\t\tdelete ButtonComponentNodeList[this._id];\n\t}\n});","/**\n * ToDo\n * @blackprint node\n */\nBlackprint.registerNode(\"Telegram/Message/Component/ButtonReply\",\nclass extends Blackprint.Node {\n\tstatic input = {\n\t\tText: String,\n\t};\n\tstatic output = {\n\t\tButton: Tg.Api.KeyboardButton,\n\t};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"Create a reply button\";\n\t}\n\n\tasync update(){\n\t\tlet { Input, Output } = this.ref;\n\t\tOutput.Button = new Tg.Api.KeyboardButton({ text: Input.Text });\n\t}\n});","/**\n * ToDo\n * @blackprint node\n */\nBlackprint.registerNode(\"Telegram/Message/Component/ButtonRow\",\nclass extends Blackprint.Node {\n\tstatic input = {\n\t\tButtonCallback: Blackprint.Port.ArrayOf(Tg.Api.KeyboardButtonCallback),\n\t\tButtonReply: Blackprint.Port.ArrayOf(Tg.Api.KeyboardButton),\n\t};\n\tstatic output = {\n\t\tRow: Tg.Api.KeyboardButtonRow,\n\t};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"Create row of button\";\n\t}\n\n\tasync update(){\n\t\tlet { Input, Output } = this.ref;\n\t\tOutput.Row = new Tg.Api.KeyboardButtonRow({\n\t\t\tbuttons: [...Input.ButtonCallback, ...Input.ButtonReply]\n\t\t});\n\t}\n});","/**\n * ToDo\n * @blackprint node\n */\nBlackprint.registerNode(\"Telegram/Message/Component/InlineKeyboard\",\nclass extends Blackprint.Node {\n\tstatic input = {\n\t\tRows: Blackprint.Port.ArrayOf(Tg.Api.KeyboardButtonRow),\n\t};\n\tstatic output = {\n\t\tReplyMarkup: Tg.Api.ReplyKeyboardMarkup,\n\t};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"Create inline keyboard markup\";\n\t}\n\n\tasync update(){\n\t\tlet { Input, Output } = this.ref;\n\t\tOutput.ReplyMarkup = new Tg.Api.ReplyKeyboardMarkup({rows: Input.Rows});\n\t}\n});","/**\n * ToDo\n * @blackprint node\n */\nBlackprint.registerNode(\"Telegram/Message/Component/InlineMessage\",\nclass extends Blackprint.Node {\n\tstatic input = {\n\t\tRows: Blackprint.Port.ArrayOf(Tg.Api.KeyboardButtonRow),\n\t};\n\tstatic output = {\n\t\tReplyMarkup: Tg.Api.ReplyInlineMarkup,\n\t};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"Create inline message markup\";\n\t}\n\n\tasync update(){\n\t\tlet { Input, Output } = this.ref;\n\t\tOutput.ReplyMarkup = new Tg.Api.ReplyInlineMarkup({rows: Input.Rows});\n\t}\n});","/**\n * ToDo\n * @blackprint node\n */\nBlackprint.registerNode(\"Telegram/Message/InlineQuery/Respond\",\nclass extends Blackprint.Node {\n\tstatic input = {\n\t\t/** Trigger the send process */\n\t\tSend: Blackprint.Port.Trigger(({ iface })=> iface.node.send()),\n\t\tQuery: Object,\n\t\tList: Blackprint.Port.ArrayOf(Tg.Api.InputBotInlineResult),\n\t};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"Respond to Inline Query\";\n\t\tthis._toast = new NodeToast(iface);\n\n\t\tthis.listenClickEvent = ev => {\n\t\t\tconsole.log(ev);\n\t\t};\n\t}\n\n\tasync send(){\n\t\tlet { Input } = this.ref;\n\t\tlet toast = this._toast;\n\n\t\tif(!Input.Query) return toast.warn(\"Query is required\");\n\n\t\tthis._lastClient?._bpOff('UpdateBotInlineSend', this.listenClickEvent);\n\n\t\tthis._lastClient = Input.Query._client;\n\t\tthis._lastClient._bpOn('UpdateBotInlineSend', this.listenClickEvent);\n\n\t\ttoast.warn(\"Sending\");\n\t\ttry {\n\t\t\tawait Input.Query._client.invoke(new Tg.Api.messages.SetInlineBotResults({\n\t\t\t\tqueryId: Input.Query.id,\n\t\t\t\tresults: Input.List || [],\n\t\t\t\tcacheTime: 5, // 5 sec\n\t\t\t\tgallery: false,\n\t\t\t\tprivate: true, // cache\n\t\t\t\t// nextOffset: \"some string here\",\n\t\t\t}));\n\t\t\tthis.routes.routeOut();\n\t\t} catch(e) {\n\t\t\tconsole.error(e);\n\t\t\ttoast.warn();\n\t\t\ttoast.error(\"Failed to send message\");\n\t\t}\n\n\t\ttoast.clear();\n\t}\n});","/**\n * ToDo\n * @blackprint node\n */\nBlackprint.registerNode(\"Telegram/Message/InlineQuery/Result/Article\",\nclass extends Blackprint.Node {\n\tstatic input = {\n\t\tTitle: String,\n\t\tDescription: String,\n\t\tRespondText: String,\n\t\tRespondButtonRows: Blackprint.Port.ArrayOf(Tg.Api.KeyboardButtonRow),\n\t};\n\tstatic output = {\n\t\tButton: Tg.Api.InputBotInlineResult,\n\t};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"Create article result\";\n\t\tthis._id = 'ɃƤ_'+String(Date.now()).slice(3) + (Math.random()*1e3 | 0);\n\t\tthis._toast = new NodeToast(iface);\n\t}\n\n\tupdate(){\n\t\tlet { Input, Output } = this.ref;\n\n\t\tif(!Input.RespondText) return this._toast.warn(\"RespondText is required\");\n\n\t\tOutput.Button = new Tg.Api.InputBotInlineResult({\n\t\t\ttype: \"article\",\n\t\t\tid: this._id,\n\t\t\ttitle: Input.Title,\n\t\t\tdescription: Input.Description,\n\t\t\tsendMessage: new Tg.Api.InputBotInlineMessageText({\n\t\t\t\tmessage: Input.RespondText,\n\t\t\t\treplyMarkup: Input.RespondButtonRows.length === 0 ? undefined : new Tg.Api.ReplyInlineMarkup({\n\t\t\t\t\trows: Input.RespondButtonRows\n\t\t\t\t}),\n\t\t\t}),\n\t\t});\n\t}\n});\n\nlet _dummyArticleButton = new Tg.Api.ReplyInlineMarkup({rows: [\n\tnew Tg.Api.KeyboardButtonRow({buttons: [\n\t\tnew Tg.Api.KeyboardButtonCallback({text: '...', data: Buffer.from('1')})\n\t]})\n]});","/**\n * ToDo\n * @blackprint node\n */\nBlackprint.registerNode(\"Telegram/Message/InlineQuery/Result/Game\",\nclass extends Blackprint.Node {\n\tstatic input = {\n\t\tId: String,\n\t\tShortName: String,\n\t};\n\tstatic output = {\n\t\tButton: Tg.Api.InputBotInlineResult,\n\t};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"Create game result\";\n\t}\n\n\tupdate(){\n\t\tlet { Input, Output } = this.ref;\n\n\t\tOutput.Button = new Tg.Api.InputBotInlineResult({\n\t\t\ttype: \"game\",\n\t\t\tid: Input.Id,\n\t\t\tshortName: Input.ShortName,\n\t\t\tsendMessage: new Tg.Api.InputBotInlineMessageGame(),\n\t\t});\n\t}\n});","/**\n * ToDo\n * @blackprint node\n */\nBlackprint.registerNode(\"Telegram/Message/InlineQuery/Result/Photo\",\nclass extends Blackprint.Node {\n\tstatic input = {\n\t\tURL: String,\n\t};\n\tstatic output = {\n\t\tButton: Object,\n\t};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"Create photo result\";\n\t\tthis._id = 'ɃƤ_'+String(Date.now()).slice(3) + (Math.random()*1e3 | 0);\n\t}\n\n\tupdate(){\n\t\tlet { Input, Output } = this.ref;\n\n\t\tlet url = Input.URL;\n\t\tif(!url) return;\n\n\t\tOutput.Button = new Tg.Api.InputBotInlineResult({\n\t\t\ttype: \"photo\",\n\t\t\tid: this._id,\n\t\t\ttitle: 'Untitled',\n\t\t\turl,\n\t\t\tthumb: new Tg.Api.InputWebDocument({url, size: 197053, mimeType: 'image/jpeg', attributes:[\n\t\t\t\tnew Tg.Api.DocumentAttributeImageSize({w:1024, h:1024})\n\t\t\t]}),\n\t\t\tcontent: new Tg.Api.InputWebDocument({url, size: 197053, mimeType: 'image/jpeg', attributes:[\n\t\t\t\tnew Tg.Api.DocumentAttributeImageSize({w:1024, h:1024})\n\t\t\t]}),\n\t\t\tsendMessage: new Tg.Api.InputBotInlineMessageMediaAuto({\n\t\t\t\tmessage: ''\n\t\t\t}),\n\t\t});\n\t}\n});"]}