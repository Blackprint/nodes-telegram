/* MIT Licensed */
"use strict";var _class2,_class3,_class4,_class5,_class6,_class7,_class8,_class9,_class10,_class11,_class12,_class13,_class14,_class15,_class16,_class17,_class18;if(void 0===window)var window=globalThis;async function imports(e){return"undefined"!=typeof sf&&void 0!==sf.loader?await sf.loader.mjs(e):Promise.all(e.map((e=>import(e))))}imports.task=function(){return"undefined"!=typeof sf&&void 0!==sf.loader?sf.loader.task:null};let Tg,Blackprint=window.Blackprint.loadScope({url:import.meta.url,hasDocs:!0}),fetch=globalThis.fetch??require("node-fetch");if(Blackprint.Environment.loadFromURL){if(await imports(["https://cdn.jsdelivr.net/npm/@blackprint/nodes-telegram@0.0.2-dep/dist/browser/telegram.js"]),null==window.telegram&&null!=window.sf?.loader&&await sf.loader.js(["https://cdn.jsdelivr.net/npm/@blackprint/nodes-telegram@0.0.2-dep/dist/browser/telegram.js"]),null==window.telegram)throw new Error("Telegram library didn't initialized");Tg=window.telegram}else Tg=await import("telegram");let Context=Blackprint.createContext("Telegram");Context.EventSlot={slot:"my-private-event-slot"},Tg.Logger.prototype.error=function(e){throw e};let VirtualClass=Tg.Api.Chat.prototype.constructor,Buffer=globalThis.Buffer??Tg.tl.serializeBytes("").constructor,ButtonComponentNodeList={};var _class;Blackprint.utils.renameTypeName({InputBotInlineResult:Tg.Api.InputBotInlineResult,KeyboardButtonRow:Tg.Api.KeyboardButtonRow,ReplyKeyboardMarkup:Tg.Api.ReplyKeyboardMarkup,ReplyInlineMarkup:Tg.Api.ReplyInlineMarkup,KeyboardButtonCallback:Tg.Api.KeyboardButtonCallback,KeyboardButton:Tg.Api.KeyboardButton}),Blackprint.registerNode("Telegram/Connection/MTProto",((_class2=class extends Blackprint.Node{constructor(e){super(e);let t=this.setInterface();t.title="Telegram MTProto",(this._toast=new NodeToast(t)).warn("Disconnected")}update(){let{Input:e,Output:t}=this.ref,n=this._toast;if(null!=t.Client&&(t.Client.disconnect(),t.Client=null),!e.StringSession&&!e.AuthToken)return n.warn("StringSession or AuthToken is required");if(!e.API_ID)return n.warn("API_ID is required");if(!e.API_Hash)return n.warn("API_Hash is required");n.clear(),n.warn("Disconnected");let r=new Tg.TelegramClient(new Tg.sessions.StringSession(e.StringSession??""),e.API_ID,e.API_Hash,{retryDelay:e.RetryDelay});r._bpEvList={},r.addEventHandler((e=>this._onEvent(e))),r._bpOn=function(e,t){let n=this._bpEvList[e]??=[];n.includes(t)||n.push(t)},r._bpOff=function(e,t){let n=this._bpEvList[e];if(null==n||0===n.length)return;if(null==t)return n.length=0;let r=n.includes(t);-1!==r&&n.splice(r,1)},r._bpOn("UpdateInlineBotCallbackQuery",(e=>{let t=e.data.toString("utf8");ButtonComponentNodeList[t]?.userClick(e)})),r.setLogLevel("error"),t.Client=r}_onEvent(e){if(void 0===e.className)return;let{_bpEvList:t}=this.ref.Output.Client,n=t[e.className];if(void 0!==n)for(let t=0;t<n.length;t++)n[t](e)}async connect(){let{Input:e,Output:t}=this.ref,n=this._toast;if(null!=t.Client||(this.update(),null!=t.Client)){n.warn("Connecting");try{e.AuthToken?await t.Client.start({botAuthToken:e.AuthToken,onError(e){n.error("Failed to connect"),console.error(arguments)}}):await t.Client.connect()}catch(e){return n.error("Failed to connect"),console.error(e),void(t.IsConnected=!1)}finally{n.warn()}if(!t.Client._bpchangedsender){t.Client._bpchangedsender=!0;let e=t.Client,r=this,s=t.Client._sender.disconnect;t.Client._sender.disconnect=async function(){if(n.warn("Disconnected"),t.IsConnected=!1,await s.apply(this,arguments),e!==t.Client||!r._autoReconnect)return;n.warn("Reconnecting");let i=e.connect(),a=0,o=setInterval((async()=>{e!==t.Client||!r._autoReconnect||e.connected?(clearInterval(o),t.IsConnected=!0,n.clear(),n.success("Connected")):(n.warn("Reconnecting "+ ++a),await e.connect())}),5e3);await i,setTimeout((()=>{e.connected&&!e._sender.userDisconnected&&(n.clear(),n.success("Connected"),clearInterval(o))}),100)}}this._autoReconnect=!0,n.clear(),n.success("Connected"),t.IsConnected=!0}}destroy(){this.disconnect()}disconnect(){let{Output:e}=this.ref;e.Client?.disconnect(),this._autoReconnect=!1,e.IsConnected=!1,this._toast.warn("Disconnected")}}).input={Connect:Blackprint.Port.Trigger((({iface:e})=>e.node.connect())),Disconnect:Blackprint.Port.Trigger((({iface:e})=>e.node.disconnect())),StringSession:String,AuthToken:String,API_ID:Number,API_Hash:String,RetryDelay:Blackprint.Port.Default(Number,1e4)},_class2.output={Client:Tg.TelegramClient,IsConnected:Boolean},_class2)),Blackprint.registerNode("Telegram/Event/InlineQuery",((_class3=class extends Blackprint.Node{constructor(e){super(e),this.setInterface().title="On Inline Query"}init(){let{Input:e,IInput:t}=this.ref;t.Client.on("disconnect",(t=>{null!=this._callback&&e.Client._bpOff("UpdateBotInlineQuery",this._callback)}))}update(){let{Input:e,Output:t}=this.ref;e.Client&&e.Client._bpOn("UpdateBotInlineQuery",this._callback=n=>{t.UserId=String(n.userId),t.Value=String(n.query),t.Query={id:String(n.queryId),_client:e.Client},this.routes.routeOut()})}destroy(){this.ref.Input.Client?._bpOff("UpdateBotInlineQuery",this._callback)}}).type="event",_class3.input={Client:Tg.TelegramClient},_class3.output={UserId:String,Value:String,Query:Object},_class3)),Blackprint.registerNode("Telegram/Event/NewMessage",((_class4=class extends Blackprint.Node{constructor(e){super(e),this.setInterface().title="On New Message"}init(){let{Input:e,IInput:t}=this.ref;t.Client.on("disconnect",(t=>{null!=this._callback&&e.Client._bpOff("UpdateNewMessage",this._callback)}))}update(){let{Input:e,Output:t}=this.ref;e.Client&&e.Client._bpOn("UpdateNewMessage",this._callback=e=>{t.Message=e.message,this.routes.routeOut()})}destroy(){this.ref.Input.Client?._bpOff("UpdateNewMessage",this._callback)}}).type="event",_class4.input={Client:Tg.TelegramClient},_class4.output={Message:Context.VirtualType(Blackprint.Port.StructOf(Object,{SenderId:{type:String,handle:e=>String(e.senderId)},ChatId:{type:String,handle:e=>String(e.chatId)},Id:{type:String,handle:e=>String(e.id)},Value:{type:String,field:"message"}}),"Message")},_class4)),Blackprint.registerNode("Telegram/Group/Kick",((_class5=class extends Blackprint.Node{constructor(e){super(e);let t=this.setInterface();t.title="Kick Group Member",this._toast=new NodeToast(t)}async trigger(){let{Input:e}=this.ref,t=this._toast;if(!e.GroupId)return t.warn("GroupId is required");t.warn("Kicking");try{await fetch(`https://api.telegram.org/bot${e.AuthToken}/kickChatMember?chat_id=${e.GroupId}&user_id=${e.UserId}`),this.routes.routeOut()}catch(e){console.error(e),t.warn(),t.error("Failed to kick group member")}t.clear()}}).input={Trigger:Blackprint.Port.Trigger((({iface:e})=>e.node.trigger())),AuthToken:String,GroupId:String,UserId:String},_class5)),Blackprint.registerNode("Telegram/Group/Leave",((_class6=class extends Blackprint.Node{constructor(e){super(e);let t=this.setInterface();t.title="Leave Group",this._toast=new NodeToast(t)}async trigger(){let{Input:e}=this.ref,t=this._toast;if(!e.GroupId)return t.warn("GroupId is required");t.warn("Leaving");try{await fetch(`https://api.telegram.org/bot${e.AuthToken}/leaveChat?chat_id=${e.GroupId}`),this.routes.routeOut()}catch(e){console.error(e),t.warn(),t.error("Failed to leave group")}t.clear()}}).input={Trigger:Blackprint.Port.Trigger((({iface:e})=>e.node.trigger())),AuthToken:String,GroupId:String},_class6)),Blackprint.registerNode("Telegram/Message/Edit",((_class7=class extends Blackprint.Node{constructor(e){super(e);let t=this.setInterface();t.title="Edit Message",this._toast=new NodeToast(t)}async send(){let{Input:e}=this.ref,t=this._toast;if(!e.Message)return t.warn("Message is required");if(!e.Text)return t.warn("Text is required");t.warn("Sending");let{Message:n}=e;try{await n._bp_client.editMessage(n.peerId,{message:n.id,text:e.Text,buttons:e.ReplyMarkup}),this.routes.routeOut()}catch(e){console.error(e),t.warn(),t.error("Failed to send message")}t.clear()}}).input={Send:Blackprint.Port.Trigger((({iface:e})=>e.node.send())),Message:Context.VirtualType(Object,"Message"),Text:String,ReplyMarkup:Blackprint.Port.Union([Tg.Api.ReplyKeyboardMarkup,Tg.Api.ReplyInlineMarkup])},_class7)),Blackprint.registerNode("Telegram/Message/Reply",((_class8=class extends Blackprint.Node{constructor(e){super(e);let t=this.setInterface();t.title="Reply Message",this._toast=new NodeToast(t)}async send(){let{Input:e}=this.ref,t=this._toast;if(!e.Message)return t.warn("Message is required");if(!e.Text)return t.warn("Text is required");t.warn("Sending");let{Message:n}=e;try{await n._bp_client.sendMessage(n.peerId,{replyTo:n.id,message:e.Text,buttons:e.ReplyMarkup}),this.routes.routeOut()}catch(e){console.error(e),t.warn(),t.error("Failed to send message")}t.clear()}}).input={Send:Blackprint.Port.Trigger((({iface:e})=>e.node.send())),Message:Context.VirtualType(Object,"Message"),Text:String,ReplyMarkup:Blackprint.Port.Union([Tg.Api.ReplyKeyboardMarkup,Tg.Api.ReplyInlineMarkup])},_class8)),Blackprint.registerNode("Telegram/Message/Send",((_class9=class extends Blackprint.Node{constructor(e){super(e);let t=this.setInterface();t.title="Send Message",this._toast=new NodeToast(t)}async send(){let{Input:e,Output:t}=this.ref,n=this._toast;if(!e.Client)return n.warn("Client is required");if(!e.ChatId)return n.warn("ChatId is required");if(!e.Text)return n.warn("Text is required");n.warn("Sending");try{t.Message=await e.Client.sendMessage(e.ChatId,{message:e.Text,replyToMsgId:e.ReplyToMsgId,sendAs:e.SendAs?await e.Client.getInputEntity(e.SendAs):void 0,buttons:e.ReplyMarkup}),t.Message._bp_client=e.Client,this.routes.routeOut()}catch(e){console.error(e),n.warn(),n.error("Failed to send message"),t.Message=null}n.clear()}}).input={Client:Tg.TelegramClient,Send:Blackprint.Port.Trigger((({iface:e})=>e.node.send())),ChatId:String,SendAs:String,Text:String,ReplyMarkup:Blackprint.Port.Union([Tg.Api.ReplyKeyboardMarkup,Tg.Api.ReplyInlineMarkup])},_class9.output={Message:Context.VirtualType(Blackprint.Port.StructOf(Object,{Id:{type:String,handle:e=>String(e.id)}}),"Message")},_class9));let NodeToast=Context.NodeToast=class{constructor(e){this.iface=e}clear(){this.haveInfo&&this.haveInfo.destroy(),this.haveWarn&&this.haveWarn.destroy(),this.haveError&&this.haveError.destroy(),this.haveInfo=!1,this.haveWarn=!1,this.haveError=!1}_reduceText(e){return e.replace(/\w{15,}/g,(e=>e.slice(0,5)+"..."))}info(e){if(!this.iface.$decoration)return;if(!e)return this.haveInfo.destroy(),void(this.haveInfo=null);let t=e;e=this._reduceText(e),this.haveInfo?this.haveInfo.text=e:this.haveInfo=this.iface.$decoration.info(e),this.haveInfo._raw=t}warn(e){if(!this.iface.$decoration)return;if(!e)return this.haveWarn.destroy(),void(this.haveWarn=null);let t=e;e=this._reduceText(e),this.haveWarn?this.haveWarn.text=e:this.haveWarn=this.iface.$decoration.warn(e),this.haveWarn._raw=t}error(e){if(!this.iface.$decoration)return;if(!e)return this.haveError.destroy(),void(this.haveError=null);let t=e;e=this._reduceText(e),this.haveError?this.haveError.text=e:this.haveError=this.iface.$decoration.error(e),this.haveError._raw=t}success(e){if(!this.iface.$decoration)return;this.iface.$decoration.success(this._reduceText(e))._raw=e}};Blackprint.registerNode("Telegram/Message/Component/ButtonCallback",((_class10=class extends Blackprint.Node{constructor(e){super(e),this.setInterface().title="Create a callback button",this._id="ɃƤ_"+String(Date.now()).slice(3)+(1e3*Math.random()|0),ButtonComponentNodeList[this._id]=this}userClick(e){this.ref.Output.Callback()}async update(){let{Input:e,Output:t}=this.ref,n=e.Data||this._id;t.Button=new Tg.Api.KeyboardButtonCallback({text:e.Text,data:Buffer.from(n)})}destroy(){delete ButtonComponentNodeList[this._id]}}).input={Text:String,Data:String},_class10.output={Button:Tg.Api.KeyboardButtonCallback,Callback:Blackprint.Types.Trigger},_class10)),Blackprint.registerNode("Telegram/Message/Component/ButtonReply",((_class11=class extends Blackprint.Node{constructor(e){super(e),this.setInterface().title="Create a reply button"}async update(){let{Input:e,Output:t}=this.ref;t.Button=new Tg.Api.KeyboardButton({text:e.Text})}}).input={Text:String},_class11.output={Button:Tg.Api.KeyboardButton},_class11)),Blackprint.registerNode("Telegram/Message/Component/ButtonRow",((_class12=class extends Blackprint.Node{constructor(e){super(e),this.setInterface().title="Create row of button"}async update(){let{Input:e,Output:t}=this.ref;t.Row=new Tg.Api.KeyboardButtonRow({buttons:[...e.ButtonCallback,...e.ButtonReply]})}}).input={ButtonCallback:Blackprint.Port.ArrayOf(Tg.Api.KeyboardButtonCallback),ButtonReply:Blackprint.Port.ArrayOf(Tg.Api.KeyboardButton)},_class12.output={Row:Tg.Api.KeyboardButtonRow},_class12)),Blackprint.registerNode("Telegram/Message/Component/InlineKeyboard",((_class13=class extends Blackprint.Node{constructor(e){super(e),this.setInterface().title="Create inline keyboard markup"}async update(){let{Input:e,Output:t}=this.ref;t.ReplyMarkup=new Tg.Api.ReplyKeyboardMarkup({rows:e.Rows})}}).input={Rows:Blackprint.Port.ArrayOf(Tg.Api.KeyboardButtonRow)},_class13.output={ReplyMarkup:Tg.Api.ReplyKeyboardMarkup},_class13)),Blackprint.registerNode("Telegram/Message/Component/InlineMessage",((_class14=class extends Blackprint.Node{constructor(e){super(e),this.setInterface().title="Create inline message markup"}async update(){let{Input:e,Output:t}=this.ref;t.ReplyMarkup=new Tg.Api.ReplyInlineMarkup({rows:e.Rows})}}).input={Rows:Blackprint.Port.ArrayOf(Tg.Api.KeyboardButtonRow)},_class14.output={ReplyMarkup:Tg.Api.ReplyInlineMarkup},_class14)),Blackprint.registerNode("Telegram/Message/InlineQuery/Respond",((_class15=class extends Blackprint.Node{constructor(e){super(e);let t=this.setInterface();t.title="Respond to Inline Query",this._toast=new NodeToast(t),this.listenClickEvent=e=>{console.log(e)}}async send(){let{Input:e}=this.ref,t=this._toast;if(!e.Query)return t.warn("Query is required");this._lastClient?._bpOff("UpdateBotInlineSend",this.listenClickEvent),this._lastClient=e.Query._client,this._lastClient._bpOn("UpdateBotInlineSend",this.listenClickEvent),t.warn("Sending");try{await e.Query._client.invoke(new Tg.Api.messages.SetInlineBotResults({queryId:e.Query.id,results:e.List||[],cacheTime:5,gallery:!1,private:!0})),this.routes.routeOut()}catch(e){console.error(e),t.warn(),t.error("Failed to send message")}t.clear()}}).input={Send:Blackprint.Port.Trigger((({iface:e})=>e.node.send())),Query:Object,List:Blackprint.Port.ArrayOf(Tg.Api.InputBotInlineResult)},_class15)),Blackprint.registerNode("Telegram/Message/InlineQuery/Result/Article",((_class16=class extends Blackprint.Node{constructor(e){super(e);let t=this.setInterface();t.title="Create article result",this._id="ɃƤ_"+String(Date.now()).slice(3)+(1e3*Math.random()|0),this._toast=new NodeToast(t)}update(){let{Input:e,Output:t}=this.ref;if(!e.RespondText)return this._toast.warn("RespondText is required");t.Button=new Tg.Api.InputBotInlineResult({type:"article",id:this._id,title:e.Title,description:e.Description,sendMessage:new Tg.Api.InputBotInlineMessageText({message:e.RespondText,replyMarkup:0===e.RespondButtonRows.length?void 0:new Tg.Api.ReplyInlineMarkup({rows:e.RespondButtonRows})})})}}).input={Title:String,Description:String,RespondText:String,RespondButtonRows:Blackprint.Port.ArrayOf(Tg.Api.KeyboardButtonRow)},_class16.output={Button:Tg.Api.InputBotInlineResult},_class16));let _dummyArticleButton=new Tg.Api.ReplyInlineMarkup({rows:[new Tg.Api.KeyboardButtonRow({buttons:[new Tg.Api.KeyboardButtonCallback({text:"...",data:Buffer.from("1")})]})]});Blackprint.registerNode("Telegram/Message/InlineQuery/Result/Game",((_class17=class extends Blackprint.Node{constructor(e){super(e),this.setInterface().title="Create game result"}update(){let{Input:e,Output:t}=this.ref;t.Button=new Tg.Api.InputBotInlineResult({type:"game",id:e.Id,shortName:e.ShortName,sendMessage:new Tg.Api.InputBotInlineMessageGame})}}).input={Id:String,ShortName:String},_class17.output={Button:Tg.Api.InputBotInlineResult},_class17)),Blackprint.registerNode("Telegram/Message/InlineQuery/Result/Photo",((_class18=class extends Blackprint.Node{constructor(e){super(e),this.setInterface().title="Create photo result",this._id="ɃƤ_"+String(Date.now()).slice(3)+(1e3*Math.random()|0)}update(){let{Input:e,Output:t}=this.ref,n=e.URL;n&&(t.Button=new Tg.Api.InputBotInlineResult({type:"photo",id:this._id,title:"Untitled",url:n,thumb:new Tg.Api.InputWebDocument({url:n,size:197053,mimeType:"image/jpeg",attributes:[new Tg.Api.DocumentAttributeImageSize({w:1024,h:1024})]}),content:new Tg.Api.InputWebDocument({url:n,size:197053,mimeType:"image/jpeg",attributes:[new Tg.Api.DocumentAttributeImageSize({w:1024,h:1024})]}),sendMessage:new Tg.Api.InputBotInlineMessageMediaAuto({message:""})}))}}).input={URL:String},_class18.output={Button:Object},_class18));
//# sourceMappingURL=nodes-telegram.mjs.map